package GameData;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.net.*;
import java.io.*;



public class MainActivity extends JFrame {
	
	GameData gameData = new GameData();

    String serverurl = "http://midas.ktk.bme.hu/poti/";

    int playerNO =0;
    int refresh = 0;
    int upstat;
    
    JButton buttons_global[]=new JButton[9]; //btnMap
    
    JTextArea tvP2 = new JTextArea();
    JTextArea tverror = new JTextArea();
    JTextArea tvplayerid = new JTextArea();
    TextField etP1=new TextField("1");
    

	public MainActivity() {
	    // Create panel p1 for the buttons and set GridLayout
	    JPanel p1 = new JPanel();
	    p1.setLayout(new GridLayout(4, 3));

	    JButton buttons[]=new JButton[9];
	    
	    // Add buttons to the panel
	    for (int i = 0; i <= 8; i++) {
	    	buttons_global[i]=new JButton("");
	        p1.add(buttons_global[i]);
	    }

	    JButton Startbtn= new JButton("START");
	    JButton Refreshbtn= new JButton("REFRESH");
	    p1.add(Startbtn);
	    p1.add(Refreshbtn);
	    

	    // Create panel p2 to hold a text field and p1
	    JPanel textLayout=new JPanel();
	    textLayout.setLayout(new GridLayout(1, 3));
	    textLayout.add(tvP2);
	    textLayout.add(tverror);
	    textLayout.add(tvplayerid);
	    
	    JPanel p2 = new JPanel(new BorderLayout());
	    p2.add(textLayout,BorderLayout.NORTH);
	    p2.add(p1, BorderLayout.CENTER);

	    // add contents into the frame
	    add(p2, BorderLayout.CENTER);
	    
	    //updateData();
	    
	    Startbtn.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	          drawMap(gameData);
	          gameData.setPlayerNO(gameData.getAvaible());
	          
	          if (gameData.getAvaible()==0) {
	        	  tvplayerid.setText("you are: X");
	        	  gameData.setAvaible(1);
	        	  gameData.setP1(etP1.getText().toString());
	        	  playerNO=gameData.getPlayerNO();
	        	  //uploadData();
	        	  tvP2.setText("waiting for p2");
	        	  refresh=1;
	        	  for (int i =0; i <9;i++) { buttons_global[i].setEnabled(false); }
	        	  
	          }
	          else if (gameData.getAvaible() == 1 )
              {
                  tvplayerid.setText("you are: O");
                  gameData.setAvaible(2);
                  gameData.setP2(etP1.getText().toString());
                  playerNO = gameData.getPlayerNO();

                  tvP2.setText(gameData.getP1());
                  //uploadData();
                  tverror.setText("waiting for p1");

                  refresh = 1;

                  for (int i =0; i <9;i++) { buttons_global[i].setEnabled(false); }

              }
	          
	          else {
                  tvplayerid.setText("the server is full");
              }

              Startbtn.setEnabled(false);
	        }
	      });
	    
	    for (int i =0 ; i < 9;i++)
        {
            final int finalI = i;
            buttons_global[i].addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (gameData.getPlayerNO() == 1 && gameData.getAvaible()== 2 )
                    {
                        gameData.setCell(finalI, gameData.getPlayerNO() );
                        drawMap(gameData);
                        gameData.setAvaible(3);
                        tverror.setText("waiting for p2");
                        //uploadData();

                        for (int i =0; i <9;i++) { buttons_global[i].setEnabled(false); }

                    }

                    if (gameData.getPlayerNO() == 2 && gameData.getAvaible()== 3 )
                    {
                        gameData.setCell(finalI, gameData.getPlayerNO() );
                        drawMap(gameData);
                        gameData.setAvaible(2);
                        tverror.setText("waiting for p1");
                        //uploadData();



                        for (int i =0; i <9;i++) { buttons_global[i].setEnabled(false); }
                    }

                }
            });
        }
	    
	    
	    Refreshbtn.addActionListener(new ActionListener() {
	    	 @Override
		     public void actionPerformed(ActionEvent e) {
	    		 //updateData();
	    		 
	    		 if (gameData.getPlayerNO() == 1 && gameData.getAvaible()== 2)
	                {
	                    tvP2.setText(gameData.getP2());
	                    drawMap(gameData);
	                    tverror.setText("your turn P1");

	                }

	                if (gameData.getPlayerNO() == 2 && gameData.getAvaible()== 3)
	                {
	                    drawMap(gameData);
	                    tverror.setText("your turn P2");
	                }
	    	 }
        });
	    

	  }
	
	public GameData datafromurl(String str)
    {
        GameData gd = new GameData();

        String[] parts = str.split(";");

        gd.setAvaible(Integer.parseInt(parts[0]));
        gd.setP1(parts[1]);
        gd.setP2(parts[2]);
        gd.setPlayerNO_d(playerNO);
        int[] asd = new int[9];
        for (int i = 0; i < 9; i++)
        {
            asd[i] = Integer.parseInt(parts[i+3]);
        }
        gd.setMap(asd);


        return gd;
    }
	
	
	
	public void drawMap (GameData gd) {
        for (int i = 0; i<9;i++)
        {
            buttons_global[i].setText( XorO(gd.getMap()[i]) );
            if(! "".equals(XorO(gd.getMap()[i])))
            {
                buttons_global[i].setEnabled(false);
            }

            else {buttons_global[i].setEnabled(true); }
        }
    }
	
	public String XorO (int e)
    {
        String val= "";
        if (e == 1) val = "X";
        if (e == 2) val = "O";
        return val;
    }
	
	
	public void draw (GameData gd)
    {
        for (int i = 0; i<9;i++) {
            buttons_global[i].setText( XorO(gd.getMap()[i]) );

        }

    }
	
	 public String generateURL(GameData gd)
	    {
	        String generated;
	        String MAP ="";
	        for(int i = 0; i <9;i++)
	        {

	            MAP = MAP+ Integer.toHexString(gd.getMap()[i])+ ";" ;
	        }

	        if (gameData.getAvaible() == 0) {
	            generated = "http://midas.ktk.bme.hu/poti/?csv=" + gameData.getAvaible() + ";" + gd.getP1() + ";waitingforplayer2;" + MAP;
	        }

	        else
	        {
	            generated = "http://midas.ktk.bme.hu/poti/?csv=" + gameData.getAvaible() + ";" + gd.getP1() + ";" + gd.getP2() + ";" + MAP;
	        }


	        return generated;
	    }
	 
     //url reader
	 public class URLConnectionReader {
		    public static String getText(String url) throws Exception {
		        URL website = new URL(url);
		        URLConnection connection = website.openConnection();
		        BufferedReader in = new BufferedReader(
		                                new InputStreamReader(
		                                    connection.getInputStream()));

		        StringBuilder response = new StringBuilder();
		        String inputLine;

		        while ((inputLine = in.readLine()) != null) 
		            response.append(inputLine);

		        in.close();

		        return response.toString();
		    }

		    public static void main(String[] args) throws Exception {
		        String content = URLConnectionReader.getText(args[0]);
		        System.out.println(content);
		    }
		}

	  /** Main method */
	  public static void main(String[] args) {
	    MainActivity frame = new MainActivity();
	    frame.setTitle("TicTacToe");
	    frame.setSize(1000, 1000);
	    frame.setLocationRelativeTo(null); // Center the frame
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    frame.setVisible(true);
	    
	    String content = URLConnectionReader.getText(args[0]);
        System.out.println(content);
	   
	  }
}


